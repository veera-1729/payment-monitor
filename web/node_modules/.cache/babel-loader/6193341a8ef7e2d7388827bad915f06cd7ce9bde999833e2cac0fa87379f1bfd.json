{"ast":null,"code":"var _jsxFileName = \"/Users/gyanendra.singh/ai_stuff/alterbridge/payment-monitor/web/src/components/MetricsChart.js\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { format } from 'date-fns';\nimport { Typography, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#00C49F', '#FFBB28', '#FF8042'];\nfunction MetricsChart({\n  data,\n  dimension\n}) {\n  // Group data by value (e.g., different gateways)\n  const groupedData = data.reduce((acc, item) => {\n    const timestamp = format(new Date(item.timestamp), 'HH:mm:ss.SSS');\n    if (!acc[timestamp]) {\n      acc[timestamp] = {\n        timestamp\n      };\n    }\n    acc[timestamp][item.value] = item.success_rate;\n    return acc;\n  }, {});\n  const chartData = Object.values(groupedData);\n\n  // Get unique values (e.g., gateway names)\n  const values = [...new Set(data.map(item => item.value))];\n  if (data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"No data available for the selected dimension\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100%',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        mb: 2\n      },\n      children: [\"Success Rate by \", dimension.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"85%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\",\n          tick: {\n            fontSize: 12\n          },\n          interval: \"preserveStartEnd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: [0, 100],\n          tick: {\n            fontSize: 12\n          },\n          label: {\n            value: 'Success Rate (%)',\n            angle: -90,\n            position: 'insideLeft',\n            style: {\n              textAnchor: 'middle'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => [`${value.toFixed(2)}%`, 'Success Rate'],\n          labelStyle: {\n            color: '#000'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), values.map((value, index) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: value,\n          name: value,\n          stroke: COLORS[index % COLORS.length],\n          strokeWidth: 2,\n          dot: false\n        }, value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_c = MetricsChart;\nexport default MetricsChart;\nvar _c;\n$RefreshReg$(_c, \"MetricsChart\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","format","Typography","Box","jsxDEV","_jsxDEV","COLORS","MetricsChart","data","dimension","groupedData","reduce","acc","item","timestamp","Date","value","success_rate","chartData","Object","values","Set","map","length","sx","height","display","alignItems","justifyContent","children","variant","color","fileName","_jsxFileName","lineNumber","columnNumber","width","mb","split","word","charAt","toUpperCase","slice","join","strokeDasharray","dataKey","tick","fontSize","interval","domain","label","angle","position","style","textAnchor","formatter","toFixed","labelStyle","index","type","name","stroke","strokeWidth","dot","_c","$RefreshReg$"],"sources":["/Users/gyanendra.singh/ai_stuff/alterbridge/payment-monitor/web/src/components/MetricsChart.js"],"sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { format } from 'date-fns';\nimport { Typography, Box } from '@mui/material';\n\nconst COLORS = [\n  '#8884d8',\n  '#82ca9d',\n  '#ffc658',\n  '#ff7300',\n  '#00C49F',\n  '#FFBB28',\n  '#FF8042',\n];\n\nfunction MetricsChart({ data, dimension }) {\n  // Group data by value (e.g., different gateways)\n  const groupedData = data.reduce((acc, item) => {\n    const timestamp = format(new Date(item.timestamp), 'HH:mm:ss.SSS');\n    if (!acc[timestamp]) {\n      acc[timestamp] = { timestamp };\n    }\n    acc[timestamp][item.value] = item.success_rate;\n    return acc;\n  }, {});\n\n  const chartData = Object.values(groupedData);\n  \n  // Get unique values (e.g., gateway names)\n  const values = [...new Set(data.map(item => item.value))];\n\n  if (data.length === 0) {\n    return (\n      <Box sx={{ height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          No data available for the selected dimension\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ height: '100%', width: '100%' }}>\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\n        Success Rate by {dimension.split('_').map(word => \n          word.charAt(0).toUpperCase() + word.slice(1)\n        ).join(' ')}\n      </Typography>\n      <ResponsiveContainer width=\"100%\" height=\"85%\">\n        <LineChart data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"timestamp\"\n            tick={{ fontSize: 12 }}\n            interval=\"preserveStartEnd\"\n          />\n          <YAxis\n            domain={[0, 100]}\n            tick={{ fontSize: 12 }}\n            label={{ \n              value: 'Success Rate (%)',\n              angle: -90,\n              position: 'insideLeft',\n              style: { textAnchor: 'middle' }\n            }}\n          />\n          <Tooltip\n            formatter={(value) => [`${value.toFixed(2)}%`, 'Success Rate']}\n            labelStyle={{ color: '#000' }}\n          />\n          <Legend />\n          {values.map((value, index) => (\n            <Line\n              key={value}\n              type=\"monotone\"\n              dataKey={value}\n              name={value}\n              stroke={COLORS[index % COLORS.length]}\n              strokeWidth={2}\n              dot={false}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n}\n\nexport default MetricsChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}